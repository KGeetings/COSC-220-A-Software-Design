/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package client;

import java.io.*;
import java.net.*;
import java.util.ArrayList;
import java.util.Scanner;

/**
 *
 * @author Kenyon
 */
public class MainPage extends javax.swing.JFrame {

    /**
     * Creates new form MainPage
     */
    public MainPage() {
        initComponents();
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        updateFollowingList();
        if (Client.newMessages != "") {
            updateMessages(Client.newMessages);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        myProfilePanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        mySentMessagesTextArea = new javax.swing.JTextArea();
        mySentMessagesLabel = new javax.swing.JLabel();
        logOutButton = new javax.swing.JButton();
        peopleFollowingLabel = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        peopleFollowingTextArea = new javax.swing.JTextArea();
        followThemLabel = new javax.swing.JLabel();
        usernameFollowThemLabel = new javax.swing.JLabel();
        followThemTextField = new javax.swing.JTextField();
        followThemButton = new javax.swing.JButton();
        unfollowThemLabel = new javax.swing.JLabel();
        usernameUnfollowThemLabel = new javax.swing.JLabel();
        unfollowThemButton = new javax.swing.JButton();
        unfollowThemComboBox = new javax.swing.JComboBox<>();
        homePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        homeFeedTextArea = new javax.swing.JTextArea();
        refreshFeedButton = new javax.swing.JButton();
        feedTextLabel = new javax.swing.JLabel();
        joinConversationLabel = new javax.swing.JLabel();
        createMesssageButton = new javax.swing.JButton();
        peopleOnlineLabel = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        peopleOnlineTextArea = new javax.swing.JTextArea();
        searchPanel = new javax.swing.JPanel();
        searchHashtagLabel = new javax.swing.JLabel();
        searchHashtagTextField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        hashtagFeedTextArea = new javax.swing.JTextArea();
        dmPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        receivePrivateMessageTextArea = new javax.swing.JTextArea();
        receivePrivateMessageLabel = new javax.swing.JLabel();
        sendPrivateMessageLabel = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        sendPrivateMessageTextArea = new javax.swing.JTextArea();
        sendPrivateMessageButton = new javax.swing.JButton();
        whoToMessageLabel = new javax.swing.JLabel();
        usernameToMessageTextField = new javax.swing.JTextField();
        goWhoToMessageButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        mySentMessagesTextArea.setColumns(20);
        mySentMessagesTextArea.setRows(5);
        jScrollPane2.setViewportView(mySentMessagesTextArea);

        mySentMessagesLabel.setText("My Sent Messages:");

        logOutButton.setText("Log Out");
        logOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOutButtonActionPerformed(evt);
            }
        });

        peopleFollowingLabel.setText("People I'm Following:");

        peopleFollowingTextArea.setColumns(20);
        peopleFollowingTextArea.setRows(5);
        jScrollPane5.setViewportView(peopleFollowingTextArea);

        followThemLabel.setText("Like another user's posts? Follow them!");

        usernameFollowThemLabel.setText("Username:");

        followThemButton.setText("Follow");
        followThemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                followThemButtonActionPerformed(evt);
            }
        });

        unfollowThemLabel.setText("Tired of someone? Unfollow them!");

        usernameUnfollowThemLabel.setText("Username:");

        unfollowThemButton.setText("Unfollow");
        unfollowThemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unfollowThemButtonActionPerformed(evt);
            }
        });

        unfollowThemComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout myProfilePanelLayout = new javax.swing.GroupLayout(myProfilePanel);
        myProfilePanel.setLayout(myProfilePanelLayout);
        myProfilePanelLayout.setHorizontalGroup(
            myProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(myProfilePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(myProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(myProfilePanelLayout.createSequentialGroup()
                        .addGroup(myProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 431, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mySentMessagesLabel))
                        .addGap(18, 18, 18)
                        .addGroup(myProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(myProfilePanelLayout.createSequentialGroup()
                                .addComponent(peopleFollowingLabel)
                                .addGap(82, 82, 82)
                                .addComponent(followThemLabel)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(myProfilePanelLayout.createSequentialGroup()
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(myProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(myProfilePanelLayout.createSequentialGroup()
                                        .addComponent(usernameFollowThemLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(followThemTextField))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, myProfilePanelLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addGroup(myProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(followThemButton, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(unfollowThemButton, javax.swing.GroupLayout.Alignment.TRAILING)))
                                    .addGroup(myProfilePanelLayout.createSequentialGroup()
                                        .addComponent(unfollowThemLabel)
                                        .addGap(0, 92, Short.MAX_VALUE))
                                    .addGroup(myProfilePanelLayout.createSequentialGroup()
                                        .addComponent(usernameUnfollowThemLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(unfollowThemComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, myProfilePanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(logOutButton)))
                .addContainerGap())
        );
        myProfilePanelLayout.setVerticalGroup(
            myProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, myProfilePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(myProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mySentMessagesLabel)
                    .addComponent(peopleFollowingLabel)
                    .addComponent(followThemLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(myProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(myProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE)
                        .addComponent(jScrollPane2))
                    .addGroup(myProfilePanelLayout.createSequentialGroup()
                        .addGroup(myProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(usernameFollowThemLabel)
                            .addComponent(followThemTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(followThemButton)
                        .addGap(17, 17, 17)
                        .addComponent(unfollowThemLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(myProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(usernameUnfollowThemLabel)
                            .addComponent(unfollowThemComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(unfollowThemButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addComponent(logOutButton)
                .addContainerGap())
        );

        jTabbedPane1.addTab("My Profile", myProfilePanel);

        homeFeedTextArea.setColumns(20);
        homeFeedTextArea.setRows(5);
        jScrollPane1.setViewportView(homeFeedTextArea);

        refreshFeedButton.setText("Refresh Feed (go to most recent)");
        refreshFeedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshFeedButtonActionPerformed(evt);
            }
        });

        feedTextLabel.setText("See what others are saying:");

        joinConversationLabel.setText("Join in the conversation:");

        createMesssageButton.setText("Create message");
        createMesssageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createMesssageButtonActionPerformed(evt);
            }
        });

        peopleOnlineLabel.setText("People you know currently online:");

        peopleOnlineTextArea.setColumns(20);
        peopleOnlineTextArea.setRows(5);
        jScrollPane7.setViewportView(peopleOnlineTextArea);

        javax.swing.GroupLayout homePanelLayout = new javax.swing.GroupLayout(homePanel);
        homePanel.setLayout(homePanelLayout);
        homePanelLayout.setHorizontalGroup(
            homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(homePanelLayout.createSequentialGroup()
                        .addComponent(joinConversationLabel)
                        .addGap(18, 18, 18)
                        .addComponent(createMesssageButton))
                    .addGroup(homePanelLayout.createSequentialGroup()
                        .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(homePanelLayout.createSequentialGroup()
                                .addComponent(feedTextLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(refreshFeedButton))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 666, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(peopleOnlineLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane7))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        homePanelLayout.setVerticalGroup(
            homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(refreshFeedButton)
                    .addComponent(feedTextLabel)
                    .addComponent(peopleOnlineLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addGap(18, 18, 18)
                .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(joinConversationLabel)
                    .addComponent(createMesssageButton))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Home", homePanel);

        searchHashtagLabel.setText("Search for a hashtag:");

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        hashtagFeedTextArea.setColumns(20);
        hashtagFeedTextArea.setRows(5);
        jScrollPane6.setViewportView(hashtagFeedTextArea);

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6)
                    .addGroup(searchPanelLayout.createSequentialGroup()
                        .addComponent(searchHashtagLabel)
                        .addGap(18, 18, 18)
                        .addComponent(searchHashtagTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchButton)
                        .addGap(0, 484, Short.MAX_VALUE)))
                .addContainerGap())
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchHashtagLabel)
                    .addComponent(searchHashtagTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 427, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Search", searchPanel);

        receivePrivateMessageTextArea.setColumns(20);
        receivePrivateMessageTextArea.setRows(5);
        jScrollPane3.setViewportView(receivePrivateMessageTextArea);

        receivePrivateMessageLabel.setText("Receive a private message:");

        sendPrivateMessageLabel.setText("Send a private message to:");

        sendPrivateMessageTextArea.setColumns(20);
        sendPrivateMessageTextArea.setRows(5);
        jScrollPane4.setViewportView(sendPrivateMessageTextArea);

        sendPrivateMessageButton.setText("Send");
        sendPrivateMessageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendPrivateMessageButtonActionPerformed(evt);
            }
        });

        whoToMessageLabel.setText("Who do you want to message?");

        goWhoToMessageButton.setText("Go");
        goWhoToMessageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goWhoToMessageButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dmPanelLayout = new javax.swing.GroupLayout(dmPanel);
        dmPanel.setLayout(dmPanelLayout);
        dmPanelLayout.setHorizontalGroup(
            dmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dmPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(sendPrivateMessageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(dmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(dmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(sendPrivateMessageButton)
                            .addGroup(dmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 653, Short.MAX_VALUE)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)))
                        .addComponent(receivePrivateMessageLabel)))
                .addGap(18, 18, 18)
                .addGroup(dmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dmPanelLayout.createSequentialGroup()
                        .addComponent(whoToMessageLabel)
                        .addGap(0, 85, Short.MAX_VALUE))
                    .addComponent(usernameToMessageTextField)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dmPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(goWhoToMessageButton)))
                .addContainerGap())
        );
        dmPanelLayout.setVerticalGroup(
            dmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dmPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(dmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(receivePrivateMessageLabel)
                    .addComponent(whoToMessageLabel))
                .addGap(11, 11, 11)
                .addGroup(dmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(dmPanelLayout.createSequentialGroup()
                        .addComponent(usernameToMessageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(goWhoToMessageButton)))
                .addGap(18, 18, 18)
                .addComponent(sendPrivateMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sendPrivateMessageButton)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("DM", dmPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void createMesssageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createMesssageButtonActionPerformed
        /// Open the CreateMessage window, modal
        CreateMessage createMessage = new CreateMessage(this, true);
        createMessage.setVisible(true);
    }//GEN-LAST:event_createMesssageButtonActionPerformed

    private void logOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logOutButtonActionPerformed
        try (Socket connector = new Socket(Client.serverIP, 2001)) {
            InputStream inStream = connector.getInputStream();
            OutputStream outStream = connector.getOutputStream();

            try (Scanner in = new Scanner(inStream)) {
                PrintWriter out = new PrintWriter(new OutputStreamWriter(outStream), true);

                // Send "REGISTER" to server
                out.println("LOGOUT");

                // Check if username is saved in Client.java
                if (Client.username != null) {
                    // Send username to server
                    out.println(Client.username);
                } else {
                    // Popup error message
                    javax.swing.JOptionPane.showMessageDialog(this, "How did you get here?");
                }
                
                // Receive response from server
                String response = in.nextLine();
                            
                // If response is "success", then close the window and return to login page
                if (response.equals("SUCCESS")) {
                    this.dispose();
                } if (response.equals("FAILURE")) {
                    // Get next line from server and display it as a popup error
                    String error = in.nextLine();
                    javax.swing.JOptionPane.showMessageDialog(this, error);
                }
                
            }
        } catch (IOException ex) {
            System.out.println(ex);
        }
        //Set Client login info to null
        Client.username = null;
        Client.password = null;
        Client.ipAddress = null;

        //Clear other info
        Client.userIPAddress = null;
        Client.userUsername = null;
        Client.messages.clear();
        Client.newMessages = "";
        Client.userPrivateMessages.clear();
        Client.userPrivateMessagesUsernameReceiving.clear();
        Client.userPrivateMessagesUsernameSending.clear();
        Client.hashtags.clear();
    }//GEN-LAST:event_logOutButtonActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // Output to system that we have closed the window
        System.out.println("Main window closed");

        // Check if we have already logged out, if not, log out
        if (Client.username != null) {
            try (Socket connector = new Socket(Client.serverIP, 2001)) {
                InputStream inStream = connector.getInputStream();
                OutputStream outStream = connector.getOutputStream();

                try (Scanner in = new Scanner(inStream)) {
                    PrintWriter out = new PrintWriter(new OutputStreamWriter(outStream), true);

                    // Send "REGISTER" to server
                    out.println("LOGOUT");

                    // Check if username is saved in Client.java
                    if (Client.username != null) {
                        // Send username to server
                        out.println(Client.username);
                    } else {
                        // Popup error message
                        javax.swing.JOptionPane.showMessageDialog(this, "How did you get here?");
                    }
                    
                    // Receive response from server
                    String response = in.nextLine();
                                
                    // If response is "success", then close the window and return to login page
                    if (response.equals("SUCCESS")) {
                        this.dispose();
                    } if (response.equals("FAILURE")) {
                        // Get next line from server and display it as a popup error
                        String error = in.nextLine();
                        javax.swing.JOptionPane.showMessageDialog(this, error);
                    }
                }
            } catch (IOException ex) {
                System.out.println(ex);
            }
        }
        //Set Client login info to null
        Client.username = null;
        Client.password = null;
        Client.ipAddress = null;

        //Clear other info
        Client.userIPAddress = null;
        Client.userUsername = null;
        Client.messages.clear();
        Client.newMessages = "";
        Client.userPrivateMessages.clear();
        Client.userPrivateMessagesUsernameReceiving.clear();
        Client.userPrivateMessagesUsernameSending.clear();
        Client.hashtags.clear();

        // Open up the Startup window
        StartupWindow startup = new StartupWindow();
        startup.setVisible(true);
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        this.dispose();
    }//GEN-LAST:event_formWindowClosing

    private void followThemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_followThemButtonActionPerformed
        // Get the username of the user we want to follow from the text field and store it in a variable
        String username = followThemTextField.getText();
        
        // Check if we have selected a user
        if (username != null) {
            try (Socket connector = new Socket(Client.serverIP, 2001)) {
                InputStream inStream = connector.getInputStream();
                OutputStream outStream = connector.getOutputStream();

                try (Scanner in = new Scanner(inStream)) {
                    PrintWriter out = new PrintWriter(new OutputStreamWriter(outStream), true);

                    // Send "FOLLOW" to server
                    out.println("FOLLOW");

                    // Send username to server
                    out.println(Client.username);
                    
                    // Send username of user we want to follow
                    out.println(username);
                    
                    // Receive response from server
                    String response = in.nextLine();
                                
                    // If response is "success", then popup message saying we have followed the user
                    if (response.equals("SUCCESS")) {
                        javax.swing.JOptionPane.showMessageDialog(this, "You are now following " + username);
                        // Update the list of users we are following
                        updateFollowingList();
                    } if (response.equals("FAILURE")) {
                        // Get next line from server and display it as a popup error
                        String error = in.nextLine();
                        javax.swing.JOptionPane.showMessageDialog(this, error);
                    }
                }
            } catch (IOException ex) {
                System.out.println(ex);
            }
        } else {
            // Popup error message
            javax.swing.JOptionPane.showMessageDialog(this, "Please select a user to follow");
        }
    }//GEN-LAST:event_followThemButtonActionPerformed

    private void updateFollowingList() {
        // Clear the peopleFollowingTextArea of all text
        peopleFollowingTextArea.setText("");
        
        try (Socket connector = new Socket(Client.serverIP, 2001)) {
            InputStream inStream = connector.getInputStream();
            OutputStream outStream = connector.getOutputStream();

            try (Scanner in = new Scanner(inStream)) {
                PrintWriter out = new PrintWriter(new OutputStreamWriter(outStream), true);

                // Send "GETFOLLOWING" to server
                out.println("GETFOLLOWING");

                // Send username to server
                out.println(Client.username);
                
                // Receive response from server
                String response = in.nextLine();
                            
                // If response is "success", then get the list of users we are following
                if (response.equals("SUCCESS")) {
                    // Get the String list of users we are following
                    String following = in.nextLine();

                    // Split the String list of users we are following into an array
                    String[] followingArray = following.split(",");

                    // Loop through the array and add each user to the peopleFollowingTextArea
                    for (String user : followingArray) {
                        peopleFollowingTextArea.append(user + "\n");
                    }
                } if (response.equals("FAILURE")) {
                    // Get next line from server and display it as a popup error
                    String error = in.nextLine();
                    javax.swing.JOptionPane.showMessageDialog(this, error);
                }
            }
        } catch (IOException ex) {
            System.out.println(ex);
        }

        // set the text of the unfollowThemComboBox to the list of users we are following (grabbed from the peopleFollowingTextArea), set the first item to null
        unfollowThemComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(peopleFollowingTextArea.getText().split("\n")));
        unfollowThemComboBox.setSelectedIndex(-1);
    }

    private void unfollowThemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unfollowThemButtonActionPerformed
        // Get the username of the user we want to unfollow from the combo box and store it in a variable
        String username = (String) unfollowThemComboBox.getSelectedItem();
        
        // Check if we have selected a user
        if (username != null) {
            try (Socket connector = new Socket(Client.serverIP, 2001)) {
                InputStream inStream = connector.getInputStream();
                OutputStream outStream = connector.getOutputStream();

                try (Scanner in = new Scanner(inStream)) {
                    PrintWriter out = new PrintWriter(new OutputStreamWriter(outStream), true);

                    // Send "UNFOLLOW" to server
                    out.println("UNFOLLOW");

                    // Send username to server
                    out.println(Client.username);
                    
                    // Send username of user we want to unfollow
                    out.println(username);
                    
                    // Receive response from server
                    String response = in.nextLine();
                                
                    // If response is "success", popup message that we have unfollowed the user
                    if (response.equals("SUCCESS")) {
                        javax.swing.JOptionPane.showMessageDialog(this, "You have unfollowed " + username);
                        // Update the list of users we are following
                        updateFollowingList();
                    } if (response.equals("FAILURE")) {
                        // Get next line from server and display it as a popup error
                        String error = in.nextLine();
                        javax.swing.JOptionPane.showMessageDialog(this, error);
                    }
                }
            } catch (IOException ex) {
                System.out.println(ex);
            }
        } else {
            // Popup error message
            javax.swing.JOptionPane.showMessageDialog(this, "Please select a user to unfollow");
        }
    }//GEN-LAST:event_unfollowThemButtonActionPerformed

    private void refreshFeedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshFeedButtonActionPerformed
        updateFeed();
    }//GEN-LAST:event_refreshFeedButtonActionPerformed

    private void updateUserSendMessages() {
        // Clear the userSendMessagesTextArea of all text
        mySentMessagesTextArea.setText("");
        
        // Grabs the local list of messages we have sent
        ArrayList<String> messages = Client.messages;
        ArrayList<String> hashtags = Client.hashtags;
        
        // Loop through the list of messages (and hashtags) we have sent and add each message to the userSendMessagesTextArea
        for (int i = 0; i < messages.size(); i++) {
            mySentMessagesTextArea.append("Message #" + i + " says: " + messages.get(i) + "\t#" + hashtags.get(i) + "\n\n");
        }
    }

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // Get the search hashtag from the searchHashtagTextField and store it in a variable
        String hashtag = searchHashtagTextField.getText();

        // Check if we have entered a hashtag
        if (hashtag != null) {
            // Clear the hashtagFeedTextArea of all text
            hashtagFeedTextArea.setText("");
            
            try (Socket connector = new Socket(Client.serverIP, 2001)) {
                InputStream inStream = connector.getInputStream();
                OutputStream outStream = connector.getOutputStream();

                try (Scanner in = new Scanner(inStream)) {
                    PrintWriter out = new PrintWriter(new OutputStreamWriter(outStream), true);

                    // Send "SEARCH" to server
                    out.println("SEARCHHASHTAG");
                    
                    // Send hashtag to server
                    out.println(hashtag);
                    
                    // Receive response from server
                    String response = in.nextLine();

                    // If response is "success", then get the list of messages that contain the hashtag
                    if (response.equals("SUCCESS")) {
                        // Get the String list of messages that contain the hashtag
                        String messages = in.nextLine();

                        // Split the String list of messages that contain the hashtag into an array
                        String[] messagesArray = messages.split("BREAKLINE000");

                        // Loop through the array and add each message to the hashtagFeedTextArea
                        for (String message : messagesArray) {
                            hashtagFeedTextArea.append(message + "\n");
                        }
                    } if (response.equals("FAILURE")) {
                        // Get next line from server and display it as a popup error
                        String error = in.nextLine();
                        javax.swing.JOptionPane.showMessageDialog(this, error);
                    }
                }
            } catch (IOException ex) {
                System.out.println(ex);
            }
        } else {
            // Popup error message
            javax.swing.JOptionPane.showMessageDialog(this, "Please enter a hashtag to search");
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        // if the tab we are on is the "My Profile" tab, then update the list of users we are following, as well as the list of messages we have sent
        if (jTabbedPane1.getSelectedIndex() == 0) {
            updateFollowingList();
            updateUserSendMessages();
        } else if (jTabbedPane1.getSelectedIndex() == 1) {
            // If the tab we are on is the "Home" tab, then update the feed (actually don't need to do this, but just in case)
        } else if (jTabbedPane1.getSelectedIndex() == 2) {
            // If the tab we are on is the "Search" tab, then do nothing
        } else if (jTabbedPane1.getSelectedIndex() == 3) {
            // If the tab we are on is the "DM" tab, then update the list of messages we have received
        }
    }//GEN-LAST:event_jTabbedPane1StateChanged

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // When the window is opened, update the list of users we are following, as well as the list of messages we have sent, and the feed
        updateFollowingList();
        updateUserSendMessages();
        updateFeed();
    }//GEN-LAST:event_formWindowOpened

    private void goWhoToMessageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goWhoToMessageButtonActionPerformed
        // Get the username of the user we want to message from the usernameToMessageTextField and store it in a variable
        Client.userUsername = usernameToMessageTextField.getText();

        // Check if we have entered a username
        if (Client.userUsername != null) {
            try (Socket connector = new Socket(Client.serverIP, 2001)) {
                InputStream inStream = connector.getInputStream();
                OutputStream outStream = connector.getOutputStream();

                try (Scanner in = new Scanner(inStream)) {
                    PrintWriter out = new PrintWriter(new OutputStreamWriter(outStream), true);

                    // Send "USERONLINE" to server
                    out.println("USERONLINE");

                    // Send our username to server
                    out.println(Client.username);
                    
                    // Send username to server
                    out.println(Client.userUsername);
                    System.out.println("Sent username to server");
                    
                    // Receive response from server
                    String response = in.nextLine();

                    // If response is "success", then get the ip address of the user we want to message
                    if (response.equals("SUCCESS")) {
                        System.out.println("Got SUCCESS from server");
                        // Get the ip address of the user we want to message
                        Client.userIPAddress = in.nextLine();
                        // Set sendPrivateMessageLabel to the username of the user we want to message
                        sendPrivateMessageLabel.setText("Send a private message to: " + Client.userUsername);
                    } if (response.equals("FAILURE")) {
                        // Get next line from server and display it as a popup error
                        String error = in.nextLine();
                        if (error.equals("User is not online")) {
                            Client.userUsername = null;
                            Client.userIPAddress = null;
                            sendPrivateMessageLabel.setText("Send a private message to: ");
                            javax.swing.JOptionPane.showMessageDialog(this, error);
                        } else if (error.equals("User does not exist")) {
                            Client.userUsername = null;
                            Client.userIPAddress = null;
                            sendPrivateMessageLabel.setText("Send a private message to: ");
                            javax.swing.JOptionPane.showMessageDialog(this, error);
                        } else {
                            Client.userUsername = null;
                            Client.userIPAddress = null;
                            sendPrivateMessageLabel.setText("Send a private message to: ");
                            javax.swing.JOptionPane.showMessageDialog(this, error);
                        }
                    }
                }
            } catch (IOException ex) {
                System.out.println(ex);
            }
        } else {
            Client.userUsername = null;
            Client.userIPAddress = null;
            sendPrivateMessageLabel.setText("Send a private message to: ");
            // Popup error message
            javax.swing.JOptionPane.showMessageDialog(this, "Please enter a username to message");
        }

    }//GEN-LAST:event_goWhoToMessageButtonActionPerformed

    private void sendPrivateMessageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendPrivateMessageButtonActionPerformed
        // Get the username of the user we want to message from the usernameToMessageTextField and store it in a variable
        Client.userUsername = usernameToMessageTextField.getText();

        // Check if we have entered a username
        if (Client.userUsername != null) {
            try (Socket connector = new Socket(Client.serverIP, 2001)) {
                InputStream inStream = connector.getInputStream();
                OutputStream outStream = connector.getOutputStream();

                try (Scanner in = new Scanner(inStream)) {
                    PrintWriter out = new PrintWriter(new OutputStreamWriter(outStream), true);

                    // Send "USERONLINE" to server
                    out.println("USERONLINE");

                    // Send our username to server
                    out.println(Client.username);
                    
                    // Send username to server
                    out.println(Client.userUsername);
                    System.out.println("Sent username to server");
                    
                    // Receive response from server
                    String response = in.nextLine();

                    // If response is "success", then get the ip address of the user we want to message
                    if (response.equals("SUCCESS")) {
                        System.out.println("Got SUCCESS from server");
                        // Get the ip address of the user we want to message
                        Client.userIPAddress = in.nextLine();
                        // Set sendPrivateMessageLabel to the username of the user we want to message
                        sendPrivateMessageLabel.setText("Send a private message to: " + Client.userUsername);

                        // Get the message we want to send from the sendPrivateMessageTextArea and store it in a variable
                        String message = sendPrivateMessageTextArea.getText();

                        // Convert any newlines and tabs to a space
                        message = message.replace("\t", " ");
                        message = message.replace("\n", " ");

                        // if message is more than 140 characters, then popup an error message
                        if (message.length() > 140) {
                            javax.swing.JOptionPane.showMessageDialog(this, "Message is too long");
                        } else if (Client.userUsername == null || Client.userIPAddress == null) {
                            javax.swing.JOptionPane.showMessageDialog(this, "Please enter a username to message");
                        } else {
                            // Check if we have entered a message and have a user and ip address to send it to
                            if (message != null && Client.userUsername != null && Client.userIPAddress != null) {
                                try (Socket connector2 = new Socket(Client.userIPAddress, 2002)) {
                                    InputStream inStream2 = connector2.getInputStream();
                                    OutputStream outStream2 = connector2.getOutputStream();

                                    try (Scanner in2 = new Scanner(inStream2)) {
                                        PrintWriter out2 = new PrintWriter(new OutputStreamWriter(outStream2), true);

                                        // Send "SENDPRIVATEMESSAGE" to other client
                                        out2.println("SENDPRIVATEMESSAGE");
                                        
                                        // Send the username of the user we want to send the message to
                                        out2.println(Client.userUsername);

                                        // Receive response from other client
                                        response = in2.nextLine();

                                        // If the response is "SUCCESS", then send our username and message to the other client
                                        if (response.equals("SUCCESS")) {
                                            // Send our username to other client
                                            out2.println(Client.username);
                                            
                                            // Send message to other client
                                            out2.println(message);
                                            
                                            // Receive response from other client
                                            response = in2.nextLine();

                                            // If response is "success", then display a popup message saying the message was sent
                                            if (response.equals("SUCCESS")) {
                                                // Display a popup message saying the message was sent
                                                javax.swing.JOptionPane.showMessageDialog(this, "Message sent");
                                                // Add the message to the list of private messages we have sent
                                                Client.userPrivateMessages.add(message);
                                                Client.userPrivateMessagesUsernameReceiving.add(Client.userUsername);
                                                Client.userPrivateMessagesUsernameSending.add(Client.username);
                                                // Update the list of private messages we have
                                                updateUserPrivateMessages();
                                            } if (response.equals("FAILURE")) {
                                                // Get next line from server and display it as a popup error
                                                String error = in2.nextLine();
                                                javax.swing.JOptionPane.showMessageDialog(this, error);
                                            }
                                        } if (response.equals("FAILURE")) {
                                            // Get next line from server and display it as a popup error
                                            String error = in2.nextLine();
                                            javax.swing.JOptionPane.showMessageDialog(this, error);
                                        }
                                        
                                    }
                                } catch (IOException ex) {
                                    System.out.println(ex);
                                }
                            } else {
                                // Popup error message
                                javax.swing.JOptionPane.showMessageDialog(this, "Please enter a message to send");
                            }
                        }
                    } if (response.equals("FAILURE")) {
                        // Get next line from server and display it as a popup error
                        String error = in.nextLine();
                        if (error.equals("User is not online")) {
                            Client.userUsername = null;
                            Client.userIPAddress = null;
                            sendPrivateMessageLabel.setText("Send a private message to: ");
                            javax.swing.JOptionPane.showMessageDialog(this, error);
                        } else if (error.equals("User does not exist")) {
                            Client.userUsername = null;
                            Client.userIPAddress = null;
                            sendPrivateMessageLabel.setText("Send a private message to: ");
                            javax.swing.JOptionPane.showMessageDialog(this, error);
                        } else {
                            Client.userUsername = null;
                            Client.userIPAddress = null;
                            sendPrivateMessageLabel.setText("Send a private message to: ");
                            javax.swing.JOptionPane.showMessageDialog(this, error);
                        }
                    }
                }
            } catch (IOException ex) {
                System.out.println(ex);
            }
        } else {
            Client.userUsername = null;
            Client.userIPAddress = null;
            sendPrivateMessageLabel.setText("Send a private message to: ");
            // Popup error message
            javax.swing.JOptionPane.showMessageDialog(this, "Please enter a username to message");
        }
    }//GEN-LAST:event_sendPrivateMessageButtonActionPerformed

    static void updateUserPrivateMessages() {
        // Clear the list of private messages we have
        receivePrivateMessageTextArea.setText("");
        // Loop through the list of private messages we have
        for (int i = 0; i < Client.userPrivateMessages.size(); i++) {
            // Add the message to the list of private messages we have
            receivePrivateMessageTextArea.append(Client.userPrivateMessagesUsernameSending.get(i) + " -> " + Client.userPrivateMessagesUsernameReceiving.get(i) + ": " + Client.userPrivateMessages.get(i) + "\n");
        }
    }

    private void updateFeed() {
        try (Socket connector = new Socket(Client.serverIP, 2001)) {
            InputStream inStream = connector.getInputStream();
            OutputStream outStream = connector.getOutputStream();

            try (Scanner in = new Scanner(inStream)) {
                PrintWriter out = new PrintWriter(new OutputStreamWriter(outStream), true);

                // Send "GETPUBLICFEED" to server
                out.println("GETPUBLICFEED");

                // Send username to server
                out.println(Client.username);
                
                // Receive response from server
                String response = in.nextLine();

                // If response is "success", then get the list of users we are following
                if (response.equals("SUCCESS")) {
                    // Get the feed from the server
                    String feed = in.nextLine();

                    // Split the feed into an array
                    String[] feedArray = feed.split("BREAKLINE000");

                    // Loop through the array and add each tweet to the homeFeedTextArea
                    for (String tweet : feedArray) {
                        homeFeedTextArea.append(tweet + "\n");
                    }
                } if (response.equals("FAILURE")) {
                    // Get next line from server and display it as a popup error
                    String error = in.nextLine();
                    javax.swing.JOptionPane.showMessageDialog(this, error);
                }
            }
        } catch (IOException ex) {
            System.out.println(ex);
        }
    }

    public static void updateMessages(String message) {
        // Popup message
        javax.swing.JOptionPane.showMessageDialog(null, message);
    }

    /**
     * @param args the command line arguments
     */
    /* public static void main(String args[]) {
        //Set the Nimbus look and feel
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        //If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
        //or details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //Create and display the dialog
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainPage().setVisible(true);
            }
        });
    } */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton createMesssageButton;
    private javax.swing.JPanel dmPanel;
    private javax.swing.JLabel feedTextLabel;
    private javax.swing.JButton followThemButton;
    private javax.swing.JLabel followThemLabel;
    private javax.swing.JTextField followThemTextField;
    private javax.swing.JButton goWhoToMessageButton;
    private javax.swing.JTextArea hashtagFeedTextArea;
    private javax.swing.JTextArea homeFeedTextArea;
    private javax.swing.JPanel homePanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel joinConversationLabel;
    private javax.swing.JButton logOutButton;
    private javax.swing.JPanel myProfilePanel;
    private javax.swing.JLabel mySentMessagesLabel;
    private javax.swing.JTextArea mySentMessagesTextArea;
    private javax.swing.JLabel peopleFollowingLabel;
    private javax.swing.JTextArea peopleFollowingTextArea;
    private javax.swing.JLabel peopleOnlineLabel;
    private javax.swing.JTextArea peopleOnlineTextArea;
    private javax.swing.JLabel receivePrivateMessageLabel;
    private static javax.swing.JTextArea receivePrivateMessageTextArea;
    private javax.swing.JButton refreshFeedButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JLabel searchHashtagLabel;
    private javax.swing.JTextField searchHashtagTextField;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JButton sendPrivateMessageButton;
    private javax.swing.JLabel sendPrivateMessageLabel;
    private javax.swing.JTextArea sendPrivateMessageTextArea;
    private javax.swing.JButton unfollowThemButton;
    private javax.swing.JComboBox<String> unfollowThemComboBox;
    private javax.swing.JLabel unfollowThemLabel;
    private javax.swing.JLabel usernameFollowThemLabel;
    private javax.swing.JTextField usernameToMessageTextField;
    private javax.swing.JLabel usernameUnfollowThemLabel;
    private javax.swing.JLabel whoToMessageLabel;
    // End of variables declaration//GEN-END:variables
}
