/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package client;

import java.io.*;
import java.net.*;
import java.util.Scanner;
/**
 *
 * @author Kenyon
 */
public class AdminPanel extends javax.swing.JFrame {

    /**
     * Creates new form AdminPanel
     */
    public AdminPanel() {
        initComponents();
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        logOutButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        numberOfRegisteredUsersLabel = new javax.swing.JLabel();
        numberOfMessagesSentLabel = new javax.swing.JLabel();
        shutdownServerButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        usersUsername = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        usersNewPassword = new javax.swing.JTextField();
        changePasswordButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        usersUsername2 = new javax.swing.JTextField();
        goSearchButton = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        idMessageTextField = new javax.swing.JTextField();
        deleteMessageButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        userMessagesTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        logOutButton.setText("Log Out");
        logOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOutButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Stats for nerds:");

        jLabel2.setText("# of Registered Users:");

        jLabel3.setText("# of Messages Sent:");

        // set number of registered users to the number of users in Client.numUsers
        numberOfRegisteredUsersLabel.setText(Integer.toString(Client.numUsers));

        numberOfMessagesSentLabel.setText(Integer.toString(Client.numMessages));

        shutdownServerButton.setText("Shutdown Server");
        shutdownServerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shutdownServerButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(logOutButton))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(numberOfRegisteredUsersLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(numberOfMessagesSentLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 411, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(shutdownServerButton))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(numberOfRegisteredUsersLabel))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(numberOfMessagesSentLabel))
                .addGap(54, 54, 54)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 343, Short.MAX_VALUE)
                        .addComponent(logOutButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(shutdownServerButton)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        jTabbedPane1.addTab("Admin Info", jPanel1);

        jLabel7.setText("Enter user's username:");

        jLabel8.setText("Enter new password:");

        changePasswordButton.setText("Change password");
        changePasswordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changePasswordButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(changePasswordButton)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(usersUsername)
                            .addComponent(usersNewPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE))))
                .addContainerGap(136, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(usersUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usersNewPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addComponent(changePasswordButton)
                .addContainerGap(422, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Change user password", jPanel2);

        jLabel9.setText("Enter user's username:");

        goSearchButton.setText("Go");
        goSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goSearchButtonActionPerformed(evt);
            }
        });

        jLabel10.setText("Enter ID of message to delete:");

        deleteMessageButton.setText("Delete message");
        deleteMessageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMessageButtonActionPerformed(evt);
            }
        });

        userMessagesTextArea.setColumns(20);
        userMessagesTextArea.setRows(5);
        jScrollPane2.setViewportView(userMessagesTextArea);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(18, 18, 18)
                                .addComponent(idMessageTextField))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel9)
                                .addGap(18, 18, 18)
                                .addComponent(usersUsername2, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(goSearchButton)
                            .addComponent(deleteMessageButton))
                        .addGap(0, 23, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(usersUsername2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(goSearchButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 444, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(idMessageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteMessageButton))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Delete user messages", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void shutdownServerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shutdownServerButtonActionPerformed
        try (Socket connector = new Socket(Client.serverIP, 2001)) {
            InputStream inStream = connector.getInputStream();
            OutputStream outStream = connector.getOutputStream();

            try (Scanner in = new Scanner(inStream)) {
                PrintWriter out = new PrintWriter(new OutputStreamWriter(outStream), true);

                // Send "SHUTDOWN" to server
                out.println("SHUTDOWN");

                // Send username to server
                out.println(Client.username);

                // Send password to server
                out.println(Client.password);
                
                // Receive response from server
                String response = in.nextLine();
                            
                // if response is "SUCCESS", then we can send a popup message
                if (response.equals("SUCCESS")) {
                    System.out.println("Server shutdown successful");
                    javax.swing.JOptionPane.showMessageDialog(this, "Server shutdown successful");
                } if (response.equals("FAILURE")) {
                    // Get next line from server and display it as a popup error
                    String error = in.nextLine();
                    javax.swing.JOptionPane.showMessageDialog(this, error);
                }
            }
        } catch (IOException ex) {
            System.out.println(ex);
        }
    }//GEN-LAST:event_shutdownServerButtonActionPerformed

    private void logOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logOutButtonActionPerformed
        // Check if we have already logged out, if not, log out
        if (Client.username != null) {
            try (Socket connector = new Socket(Client.serverIP, 2001)) {
                InputStream inStream = connector.getInputStream();
                OutputStream outStream = connector.getOutputStream();

                try (Scanner in = new Scanner(inStream)) {
                    PrintWriter out = new PrintWriter(new OutputStreamWriter(outStream), true);

                    // Send "REGISTER" to server
                    out.println("LOGOUT");

                    // Check if username is saved in Client.java
                    if (Client.username != null) {
                        // Send username to server
                        out.println(Client.username);
                    } else {
                        // Popup error message
                        javax.swing.JOptionPane.showMessageDialog(this, "How did you get here?");
                    }
                    
                    // Receive response from server
                    String response = in.nextLine();
                                
                    // If response is "success", then close the window and return to login page
                    if (response.equals("SUCCESS")) {
                        this.dispose();
                    } if (response.equals("FAILURE")) {
                        // Get next line from server and display it as a popup error
                        String error = in.nextLine();
                        javax.swing.JOptionPane.showMessageDialog(this, error);
                    }
                    //Set Client.username to null
                    Client.username = null;
                }
            } catch (IOException ex) {
                System.out.println(ex);
            }
        }
    }//GEN-LAST:event_logOutButtonActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // Output to system that we have closed the window
        System.out.println("Admin panel closed");

        // Check if we have already logged out, if not, log out
        if (Client.username != null) {
            try (Socket connector = new Socket(Client.serverIP, 2001)) {
                InputStream inStream = connector.getInputStream();
                OutputStream outStream = connector.getOutputStream();

                try (Scanner in = new Scanner(inStream)) {
                    PrintWriter out = new PrintWriter(new OutputStreamWriter(outStream), true);

                    // Send "REGISTER" to server
                    out.println("LOGOUT");

                    // Check if username is saved in Client.java
                    if (Client.username != null) {
                        // Send username to server
                        out.println(Client.username);
                    } else {
                        // Popup error message
                        javax.swing.JOptionPane.showMessageDialog(this, "How did you get here?");
                    }
                    
                    // Receive response from server
                    String response = in.nextLine();
                                
                    // If response is "success", then close the window and return to login page
                    if (response.equals("SUCCESS")) {
                        this.dispose();
                    } if (response.equals("FAILURE")) {
                        // Get next line from server and display it as a popup error
                        String error = in.nextLine();
                        javax.swing.JOptionPane.showMessageDialog(this, error);
                    }
                }
            } catch (IOException ex) {
                System.out.println(ex);
            }
        }
        // Open up the Startup window
        StartupWindow startup = new StartupWindow();
        startup.setVisible(true);
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        this.dispose();
    }//GEN-LAST:event_formWindowClosing

    private void changePasswordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changePasswordButtonActionPerformed
        //Get the username and password from the text fields
        String username = usersUsername.getText();
        String newPassword = usersNewPassword.getText();

        // Check if the username and password fields are empty
        if (username.equals("") || newPassword.equals("")) {
            javax.swing.JOptionPane.showMessageDialog(this, "Please fill in all fields");
        } else {
            try (Socket connector = new Socket(Client.serverIP, 2001)) {
                InputStream inStream = connector.getInputStream();
                OutputStream outStream = connector.getOutputStream();

                try (Scanner in = new Scanner(inStream)) {
                    PrintWriter out = new PrintWriter(new OutputStreamWriter(outStream), true);

                    // Send "CHANGEPASSWORD" to server
                    out.println("CHANGEPASSWORD");

                    // Send ours username and password to server for verification
                    out.println(Client.username);
                    out.println(Client.password);

                    // Check response to make sure our credentials are correct
                    String response = in.nextLine();
                    if (response.equals("SUCCESS")) {
                        // Send the username and password to the server
                        out.println(username);
                        out.println(newPassword);

                        // Get response from server
                        response = in.nextLine();
                        if (response.equals("SUCCESS")) {
                            javax.swing.JOptionPane.showMessageDialog(this, "Password changed successfully for user " + username);
                        } else {
                            // Get next line from server and display it as a popup error
                            String error = in.nextLine();
                            javax.swing.JOptionPane.showMessageDialog(this, error);
                        }
                    } else {
                        // Get next line from server and display it as a popup error
                        String error = in.nextLine();
                        javax.swing.JOptionPane.showMessageDialog(this, error);
                    }
                }
            } catch (IOException ex) {
                System.out.println(ex);
            }
        }
    }//GEN-LAST:event_changePasswordButtonActionPerformed

    private void goSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goSearchButtonActionPerformed
        // Get the username from the text field
        String username = usersUsername2.getText();

        // Check if the username field is empty
        if (username.equals("")) {
            javax.swing.JOptionPane.showMessageDialog(this, "Please fill in all fields");
        } else {
            try (Socket connector = new Socket(Client.serverIP, 2001)) {
                InputStream inStream = connector.getInputStream();
                OutputStream outStream = connector.getOutputStream();

                try (Scanner in = new Scanner(inStream)) {
                    PrintWriter out = new PrintWriter(new OutputStreamWriter(outStream), true);

                    // Send "SEARCHUSER" to server
                    out.println("SEARCHUSER");

                    // Send ours username and password to server for verification
                    out.println(Client.username);
                    out.println(Client.password);

                    // Check response to make sure our credentials are correct
                    String response = in.nextLine();
                    if (response.equals("SUCCESS")) {
                        // Send the username to the server
                        out.println(username);

                        // Get response from server
                        response = in.nextLine();
                        if (response.equals("SUCCESS")) {
                            // Get all the user's messages on the public feed
                            String messages = in.nextLine();

                            // Split the String list of messages that contain the hashtag into an array
                            String[] messagesArray = messages.split("BREAKLINE000");

                            // Clear the list of messages
                            userMessagesTextArea.setText("");
                            
                            // Loop through the array and add each message to the userMessagesTextArea
                            for (String message : messagesArray) {
                                userMessagesTextArea.append(message + "\n");
                            }
                        } else {
                            // Get next line from server and display it as a popup error
                            String error = in.nextLine();
                            javax.swing.JOptionPane.showMessageDialog(this, error);
                        }
                    } else {
                        // Get next line from server and display it as a popup error
                        String error = in.nextLine();
                        javax.swing.JOptionPane.showMessageDialog(this, error);
                    }
                }
            } catch (IOException ex) {
                System.out.println(ex);
            }
        }
    }//GEN-LAST:event_goSearchButtonActionPerformed

    private void deleteMessageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMessageButtonActionPerformed
        // Get the message ID from the text field
        String messageID = idMessageTextField.getText();

        // Check if the message ID field is empty
        if (messageID.equals("")) {
            javax.swing.JOptionPane.showMessageDialog(this, "Please enter a message ID");
        } else {
            try (Socket connector = new Socket(Client.serverIP, 2001)) {
                InputStream inStream = connector.getInputStream();
                OutputStream outStream = connector.getOutputStream();

                try (Scanner in = new Scanner(inStream)) {
                    PrintWriter out = new PrintWriter(new OutputStreamWriter(outStream), true);

                    // Send "DELETEMESSAGE" to server
                    out.println("DELETEMESSAGE");

                    // Send ours username and password to server for verification
                    out.println(Client.username);
                    out.println(Client.password);

                    // Check response to make sure our credentials are correct
                    String response = in.nextLine();
                    if (response.equals("SUCCESS")) {
                        // Send the message ID to the server
                        out.println(messageID);

                        // Get response from server
                        response = in.nextLine();
                        if (response.equals("SUCCESS")) {
                            javax.swing.JOptionPane.showMessageDialog(this, "Message deleted successfully");
                        } else {
                            // Get next line from server and display it as a popup error
                            String error = in.nextLine();
                            javax.swing.JOptionPane.showMessageDialog(this, error);
                        }
                    } else {
                        // Get next line from server and display it as a popup error
                        String error = in.nextLine();
                        javax.swing.JOptionPane.showMessageDialog(this, error);
                    }
                }
            } catch (IOException ex) {
                System.out.println(ex);
            }
        }
    }//GEN-LAST:event_deleteMessageButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    /* public static void main(String args[]) {
        //Set the Nimbus look and feel
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        //If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
        //or details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //Create and display the form
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminPanel().setVisible(true);
            }
        });
    } */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton changePasswordButton;
    private javax.swing.JButton deleteMessageButton;
    private javax.swing.JButton goSearchButton;
    private javax.swing.JTextField idMessageTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton logOutButton;
    private javax.swing.JLabel numberOfMessagesSentLabel;
    private javax.swing.JLabel numberOfRegisteredUsersLabel;
    private javax.swing.JButton shutdownServerButton;
    private javax.swing.JTextArea userMessagesTextArea;
    private javax.swing.JTextField usersNewPassword;
    private javax.swing.JTextField usersUsername;
    private javax.swing.JTextField usersUsername2;
    // End of variables declaration//GEN-END:variables
}
