
import java.io.IOException;
import java.io.PrintWriter;
import java.io.*;
import java.net.Socket;
import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Stephen Fyfe
 */
public class ClientGUI extends javax.swing.JFrame {
    private CommInfo comm;
    
    public ClientGUI() {
        comm = new CommInfo("localhost", 2002);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        accountFld = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        pinFld = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        amountFld = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        balanceFld = new javax.swing.JTextField();
        depositBtn = new javax.swing.JButton();
        withdrawBtn = new javax.swing.JButton();
        balanceBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ATM MACHINE");

        jLabel1.setText("ACCOUNT:");

        jLabel2.setText("PIN:");

        jLabel3.setText("AMOUNT:");

        jLabel4.setText("BALANCE:");

        depositBtn.setText("DEPOSIT");
        depositBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                depositHandler(evt);
            }
        });

        withdrawBtn.setLabel("WITHDRAW");
        withdrawBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                withdrawHandler(evt);
            }
        });

        balanceBtn.setLabel("CHECK BALANCE");
        balanceBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBalanceHandler(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(depositBtn)
                                .addGap(18, 18, 18)
                                .addComponent(withdrawBtn))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(accountFld, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                                    .addComponent(pinFld)
                                    .addComponent(amountFld)
                                    .addComponent(balanceFld)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addComponent(balanceBtn)))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(accountFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(pinFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(amountFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(balanceFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(depositBtn)
                    .addComponent(withdrawBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(balanceBtn)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

/*  our task in this quiz is to implement the event handler for the WITHDRAW button. The GUI builder was
    used to create the GUI and the event handler method has already been created and is named withdrawHandler.
    Your code for that method needs to open a socket connection and follow the protocol given below */

    /* PROTOCOL
    GUI sends: WITHDRAW or DEPOSIT or BALANCE (in all caps, server responses will be in all caps)
    SERVER responds: WHO or BAD COMMAND (The server will close the socket and stop sending an receiving
    if it sends the message BAD COMMAND)
    GUI sends: num (num is an account number in the textfield of the GUI)
    SERVER responds: VALID or INVALID (if the account does not exist it responds with invalid and stops the
    protocol)
    GUI sends: num (num is the pin number for the account in the textfield of the GUI)
    SERVER reponds: VALID or INVALID (if the pin does not match what is stored for that account it responds
    with invalid and stops the protocol)
    GUI sends: amount (amount comes from the textfield in the GUI)
    SERVER responds: SUFFICIENT or INSUFFICIENT
    If the server responds with sufficient, it immediately sends another line which is the new balance of the
    account.
    If the server responds with insufficient because there were not enough funds to cover the withdrawal it stops the
    protocol (A withdraw command is the only time the server would send insufficient)
    GUI sends: COMPLETE (only if the previous message was SUFFICIENT with a new balance)
    SERVER responds: SAYANORA */

    /* The GUI should display an appropriate message with a JOptionPane message box giving the result of the
    transaction and should update the Balance text field if the transaction was successfully completed. Remember
    that you are only writing the client portion of this protocol.
    For full credit your code must recognize when it gets BAD COMMAND or INVALID and give the user an
    appropriate message and stop the protocol. */
    private void withdrawHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_withdrawHandler
        try (Socket socket = new Socket(comm.getIP(), comm.getPort())) {
            InputStream inStream = socket.getInputStream();
            OutputStream outStream = socket.getOutputStream();

            try (Scanner in = new Scanner(inStream)) {
                PrintWriter out = new PrintWriter(outStream, true);

                out.println("WITHDRAW");
                String response = in.nextLine();

                if (response.equals("WHO")) {
                    out.println(accountFld.getText());
                    response = in.nextLine();

                    if (response.equals("VALID")) {
                        out.println(pinFld.getText());
                        response = in.nextLine();

                        if (response.equals("VALID")) {
                            out.println(amountFld.getText());
                            response = in.nextLine();

                            if (response.equals("SUFFICIENT")) {
                                response = in.nextLine();
                                balanceFld.setText(response);
                                out.println("COMPLETE");
                                response = in.nextLine();

                                if (response.equals("SAYANORA")) {
                                    javax.swing.JOptionPane.showMessageDialog(this, "Withdrawal successful");
                                }
                            } else if (response.equals("INSUFFICIENT")) {
                                javax.swing.JOptionPane.showMessageDialog(this, "Insufficient funds");
                            }
                        } else if (response.equals("INVALID")) {
                            javax.swing.JOptionPane.showMessageDialog(this, "Invalid pin");
                        }
                    } else if (response.equals("INVALID")) {
                        javax.swing.JOptionPane.showMessageDialog(this, "Invalid account number");
                    }
                } else if (response.equals("BAD COMMAND")) {
                    javax.swing.JOptionPane.showMessageDialog(this, "Bad command");
                }
            }
        } catch (IOException ex) {
            System.out.println(ex);
        }
    }//GEN-LAST:event_withdrawHandler

    private void depositHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_depositHandler
        // Not required for this quiz
    }//GEN-LAST:event_depositHandler

    private void checkBalanceHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBalanceHandler
        // Not required for this quiz
    }//GEN-LAST:event_checkBalanceHandler

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField accountFld;
    private javax.swing.JTextField amountFld;
    private javax.swing.JButton balanceBtn;
    private javax.swing.JTextField balanceFld;
    private javax.swing.JButton depositBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField pinFld;
    private javax.swing.JButton withdrawBtn;
    // End of variables declaration//GEN-END:variables
}
